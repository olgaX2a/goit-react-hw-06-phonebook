{"version":3,"sources":["redux/phonebook/phonebook-selectors.js","redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","helpers/filterContacts.js","components/Filter/Filter.jsx","App.js","redux/phonebook/phonebook-reducers.js","redux/store.js","index.js"],"names":["getContacts","state","phonebook","contacts","getFilter","filter","addContact","createAction","deleteContact","filterContact","ContactForm","dispatch","useDispatch","fullContactList","useSelector","useState","name","setName","number","setNumber","handleChangeUserInfo","event","target","value","trim","className","onSubmit","preventDefault","contact","id","uuidv4","normalizedName","toLowerCase","map","el","find","isInContactList","alert","onChange","type","pattern","title","required","PhonebookListItem","onClick","ContactList","normalizedFilter","includes","filterContacts","Filter","filterValue","App","createReducer","action","payload","filterReducer","_","phonebookReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","persistedReducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.7022b9af.chunk.js","sourcesContent":["export const getContacts = (state) => state.phonebook.contacts;\n\nexport const getFilter = (state) => state.phonebook.filter;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"phonebook/addContact\");\nexport const deleteContact = createAction(\"phonebook/deleteContact\");\nexport const filterContact = createAction(\"phonebook/filterContact\");\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./ContactForm.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContacts } from \"../../redux/phonebook/phonebook-selectors\";\nimport { addContact } from \"../../redux/phonebook/phonebook-actions\";\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const fullContactList = useSelector(getContacts);\n\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChangeUserInfo = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value.trim());\n        break;\n\n      case \"number\":\n        setNumber(value.trim());\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const isInContactList = (contact) => {\n    const normalizedName = contact.name.toLowerCase();\n    const names = fullContactList.map((el) => el.name.toLowerCase());\n    const existingName = names.find((name) => name === normalizedName);\n    return existingName;\n  };\n\n  const handleUserFormSubmit = (event) => {\n    event.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n    if (!isInContactList(contact)) {\n      dispatch(addContact(contact));\n      resetForm();\n    } else {\n      return alert(\"This contact is already in contact list!\");\n    }\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleUserFormSubmit}>\n      <label className=\"Form__label\">\n        Name\n        <input\n          onChange={handleChangeUserInfo}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className=\"Form__label\">\n        Number\n        <input\n          onChange={handleChangeUserInfo}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"Form__add-btn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import \"./ContactList.css\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/phonebook/phonebook-actions\";\n\nconst PhonebookListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <li className=\"Contact__item\">\n      <p className=\"Contact__info\">{name}: </p>\n      <p className=\"Contact__info\">{number}</p>\n      <button\n        type=\"button\"\n        id={id}\n        onClick={() => dispatch(deleteContact(id))}\n        className=\"Contact__delete-btn\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default PhonebookListItem;\n","import PhonebookListItem from \"./ContactListItem\";\nimport \"./ContactList.css\";\nimport { useSelector } from \"react-redux\";\nimport {\n  getContacts,\n  getFilter,\n} from \"../../redux/phonebook/phonebook-selectors\";\nimport { filterContacts } from \"../../helpers/filterContacts\";\n\nconst ContactList = () => {\n  const fullContactList = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const contacts = filterContacts(fullContactList, filter);\n\n  return (\n    <ul className=\"Contact__list\">\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <PhonebookListItem key={id} name={name} number={number} id={id} />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","export const filterContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase().trim();\n  return contacts.filter((contact) => {\n    return contact.name.toLowerCase().includes(normalizedFilter);\n  });\n};\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { getFilter } from \"../../redux/phonebook/phonebook-selectors\";\nimport { filterContact } from \"../../redux/phonebook/phonebook-actions\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(getFilter);\n  const onFilterChange = (event) => {\n    dispatch(filterContact(event.target.value));\n  };\n  return (\n    <>\n      <label className=\"Filter\">\n        <p>Find contacts by name:</p>\n        <input\n          name=\"filter\"\n          type=\"text\"\n          onChange={onFilterChange}\n          value={filterValue}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nfunction App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n\nexport default App;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { addContact, deleteContact, filterContact } from \"./phonebook-actions\";\n\nconst contacts = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [filterContact]: (_, { payload }) => payload,\n});\nconst phonebookReducer = combineReducers({\n  contacts,\n  filter: filterReducer,\n});\nexport default phonebookReducer;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport phonebookReducer from \"./phonebook/phonebook-reducers\";\n\nconst contactsPersistConfig = {\n  key: \"phonebook\",\n  storage,\n  blacklist: \"filter\",\n};\nconst persistedReducer = persistReducer(\n  contactsPersistConfig,\n  phonebookReducer\n);\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    phonebook: persistedReducer,\n  },\n  middleware,\n  // devTools: process.env.NODE_ENV !== 'production',\n  devTools: true,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}